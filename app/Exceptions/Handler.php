<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use App\Traits\HelperTrait;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\ServerException;
use Illuminate\Http\Response;
use Illuminate\Validation\ValidationException;
use InvalidArgumentException;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Symfony\Component\HttpKernel\Exception\HttpException;

class Handler extends ExceptionHandler
{
    use HelperTrait;
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        if ($request->is('api/*')) {

            switch (true) {
                case $e instanceof HttpException:
                    return $this->errorResponse($e->getStatusCode(), Response::$statusTexts[$e->getStatusCode()]);
                case $e instanceof ModelNotFoundException:
                    $model = strtolower(class_basename($e->getModel()));
                    return $this->errorResponse(Response::HTTP_NOT_FOUND, $model);
                case $e instanceof AuthorizationException:
                    return $this->errorResponse(Response::HTTP_FORBIDDEN, $e->getMessage());
                case $e instanceof AuthenticationException:
                    return $this->errorResponse(Response::HTTP_UNAUTHORIZED, $e->getMessage());
                case $e instanceof InvalidArgumentException:
                    return $this->errorResponse(Response::HTTP_BAD_REQUEST, $e->getMessage());
                case $e instanceof RouteNotFoundException:
                    return $this->errorResponse(Response::HTTP_NOT_ACCEPTABLE, $e->getMessage());
                case $e instanceof ClientException:
                    return $this->errorResponse($e->getCode(), $e->getResponse()->getBody()->getContents());
                case $e instanceof ServerException:
                    return $this->errorResponse((int)$e->getCode(), $e->getResponse()->getBody()->getContents());
                case $e instanceof ValidationException:
                    return $this->errorResponse(Response::HTTP_BAD_REQUEST, $e->validator->errors()->getMessages());
            }
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
